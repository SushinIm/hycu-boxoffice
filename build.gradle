plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'checkstyle'
	id "nu.studer.jooq" version "7.0"
}

group = 'com.hycu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

checkstyle {
	maxWarnings = 0
	configFile = file('config/codestyle/google-checks.xml')
	toolVersion = '10.5.0'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	jooqGenerator('com.mysql:mysql-connector-j')

	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.named('test') {
	useJUnitPlatform()
}

jooq {
	version = dependencyManagement.importedProperties['jooq.version']
	configurations {
		main {
			generateSchemaSourceOnCompilation = true
			generationTool {
				logging = org.jooq.meta.jaxb.Logging.WARN
				onError = 'LOG'

				jdbc {
					driver = 'com.mysql.cj.jdbc.Driver'
					url = 'jdbc:mysql://localhost:3306/project'
					user = System.getenv("DB_ID")
					password = System.getenv("DB_PW")
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					strategy {
						name = 'org.jooq.codegen.DefaultGeneratorStrategy'
					}
					database {
						name = 'org.jooq.meta.mysql.MySQLDatabase'
						unsignedTypes = false
						inputSchema = 'project'
					}
					generate {
						deprecated = false
						records = true
						immutablePojos = true
						fluentSetters = true
						javaTimeTypes = true
					}
					target {
						packageName = 'jooq.dsl'
						directory = 'src/generated/jooq/'
					}
				}
			}
		}
	}
}